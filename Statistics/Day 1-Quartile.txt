Objective
In this challenge, we practice calculating quartiles. Check out the Tutorial tab for learning materials and an instructional video!

Task
Given an array, , of  integers, calculate the respective first quartile (), second quartile (), and third quartile (). It is guaranteed that , , and  are integers.

Input Format

The first line contains an integer, , denoting the number of elements in the array.
The second line contains  space-separated integers describing the array's elements.

Constraints

, where  is the  element of the array.
Output Format

Print  lines of output in the following order:

The first line should be the value of .
The second line should be the value of .
The third line should be the value of .
Sample Input

9
3 7 8 5 12 14 21 13 18
Sample Output

6
12
16
Explanation

. When we sort the elements in non-decreasing order, we get . It's easy to see that .

As there are an odd number of data points, we do not include the median (the central value in the ordered list) in either half:

Lower half (L): 3, 5, 7, 8

Upper half (U): 13, 14, 18, 21

Now, we find the quartiles:

 is the . So, .
 is the . So, .
 is the . So, .

Solution :

n = int(input())
values = list(map(int, input().split()))
values.sort()

lower_half =[]
upper_half = []
median = int(n/2)

q_1 = 0
q_2 = 0
q_3 = 0

if n % 2 ==0:
    lower_half = values[0:median]
    upper_half = values[median :]
    q_2 = int((values[median-1] + values[median])/2)
else:
    lower_half = values[0:median]
    upper_half = values[median+1 :]
    q_2 = values[median]

half_median = int(len(lower_half)/2)

if len(lower_half) %2 == 0:
    q_1 = (lower_half[half_median-1] + lower_half[half_median])/2
    q_3 = (upper_half[half_median-1] + upper_half[half_median])/2
else:
    q_1 = lower_half[half_median]
    q_3 = upper_half[half_median]

print(int(q_1))
print(int(q_2))
print(int(q_3))

